handle_new_aid_request:
  agent: supervisor_agent
  description: >
    Initiates the aid request process by coordinating the intake, validation, and storage steps. 
    Ensures each stage is completed in sequence and prepares a confirmation for the requester.
  expected_output: >
    Aid request flow initiated. Intake delegated to conversational agent, 
    data validation and storage triggered, and confirmation prepared.

extract_request_information:
  agent: conversational_intake_agent
  description: >
    Collects and structures user-provided information through a brief conversational 
    exchange. May ask up to three clarifying questions to complete required fields.
  expected_output: >
    JSON object with required fields:
    - category (e.g. food, hygiene)
    - urgency (low | medium | high)
    - help_mode (physical | virtual | unknown)
    - location_hint (approximate)
    - description (short summary)
    - is_anonymous (boolean)
    If user declines to answer, include 'unknown' or default-safe value.

store_aid_request:
  agent: database_handler_agent
  description: >
    Validates and securely stores the structured aid request data in the database. 
    Confirms successful storage or reports any errors encountered.
  expected_output: >
    Record stored in database with a unique ID and no validation errors.
    Malformed or unsafe entries are rejected with a structured error response.

send_confirmation_message:
  agent: supervisor_agent
  description: >
    Delivers a confirmation message to the requester after successful storage of 
    the aid request. The message reflects urgency and respects anonymity preferences.
  expected_output: >
    Personalized confirmation message delivered to requester. 
    Message respects anonymity preferences and reflects urgency level 
    (e.g., “We’ll try to connect you quickly.”)
  
simulate_aid_request:
  agent: supervisor_agent
  description: >
    Runs a simulated end-to-end process from intake to storage, testing edge cases such 
    as incomplete answers or multi-part responses. Outputs mock data and logs each step 
    of the process.
  expected_output: >
    Full end-to-end simulation completed. 
    Outputs mock JSON, simulates question/answer exchange, 
    and logs storage + confirmation steps.